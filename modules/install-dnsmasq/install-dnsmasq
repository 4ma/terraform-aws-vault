#!/bin/bash
# Install Dnsmasq and configure it to forward requests for a specific domain to Consul. This script has been tested with the
# following operating systems:
#
# 1. Ubuntu 16.04
# 2. Amazon Linux

set -e

readonly DEFAULT_CONSUL_DOMAIN="CONSUL"
readonly DEFAULT_CONSUL_IP="127.0.0.1"
readonly DEFAULT_CONSUL_DNS_PORT=8600

readonly DNS_MASQ_CONFIG_DIR="/etc/dnsmasq.d"
readonly CONSUL_DNS_MASQ_CONFIG_FILE="$DNS_MASQ_CONFIG_DIR/10-consul"

function print_usage {
  echo
  echo "Usage: install-dnsmasq [OPTIONS]"
  echo
  echo "Install Dnsmasq and configure it to forward requests for a specific domain to Consul. This script has been tested with Ubuntu 16.04 and Amazon Linux."
  echo
  echo "Options:"
  echo
  echo -e "  --version\t\tThe version of Dnsmasq to install. Required."
  echo -e "  --consul-domain\t\tThe domain name to point to Consul. Optional. Default: $DEFAULT_CONSUL_DOMAIN."
  echo -e "  --consul-ip\t\tThe IP address to use for Consul. Optional. Default: $DEFAULT_CONSUL_IP."
  echo -e "  --consul-dns-port\t\tThe port Consul uses for DNS. Optional. Default: $DEFAULT_CONSUL_DNS_PORT."
  echo
  echo "Example:"
  echo
  echo "  install-dnsmasq --version 2.75-1"
}

function log {
  local readonly level="$1"
  local readonly message="$2"
  local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [install-dnsmasq] ${message}"
}

function log_info {
  local readonly message="$1"
  log "INFO" "$message"
}

function log_warn {
  local readonly message="$1"
  log "WARN" "$message"
}

function log_error {
  local readonly message="$1"
  log "ERROR" "$message"
}

function assert_not_empty {
  local readonly arg_name="$1"
  local readonly arg_value="$2"

  if [[ -z "$arg_value" ]]; then
    log_error "The value for '$arg_name' cannot be empty"
    print_usage
    exit 1
  fi
}

function has_yum {
  [[ -n "$(command -v yum)" ]]
}

function has_apt_get {
  [[ -n "$(command -v apt-get)" ]]
}

function install_dnsmasq {
  local readonly version="$1"

  log_info "Installing Dnsmasq $version"

  if $(has_apt_get); then
    sudo apt-get update -y
    sudo apt-get install -y dnsmasq="$version"
  elif $(has_yum); then
    sudo yum update -y
    sudo yum install -y dnsmasq-"$version"
  else
    log_error "Could not find apt-get or yum. Cannot install on this OS."
    exit 1
  fi
}

function write_consul_config {
  local readonly consul_domain="$1"
  local readonly consul_ip="$2"
  local readonly consul_port="$3"

  log_info "Configuring Dnsmasq to forward lookups of the '$consul_domain' domain to $consul_ip:$consul_port in $CONSUL_DNS_MASQ_CONFIG_FILE"
  mkdir -p "$DNS_MASQ_CONFIG_DIR"

  sudo tee "$CONSUL_DNS_MASQ_CONFIG_FILE" <<EOF
# Enable forward lookup of the '$consul_domain' domain:
server=/${consul_domain}/${consul_ip}#${consul_port}

# Accept DNS queries only from hosts whose address is on a local subnet.
local-service
EOF
}

function install {
  local version=""
  local consul_domain="$DEFAULT_CONSUL_DOMAIN"
  local consul_ip="$DEFAULT_CONSUL_IP"
  local consul_dns_port="$DEFAULT_CONSUL_DNS_PORT"

  while [[ $# > 0 ]]; do
    local key="$1"

    case "$key" in
      --version)
        version="$2"
        shift
        ;;
      --consul-domain)
        assert_not_empty "$key" "$2"
        consul_domain="$2"
        shift
        ;;
      --consul-ip)
        assert_not_empty "$key" "$2"
        consul_ip="$2"
        shift
        ;;
      --consul-dns-port)
        assert_not_empty "$key" "$2"
        consul_dns_port="$2"
        shift
        ;;
      --help)
        print_usage
        exit
        ;;
      *)
        log_error "Unrecognized argument: $key"
        print_usage
        exit 1
        ;;
    esac

    shift
  done

  assert_not_empty "--version" "$version"

  log_info "Starting Dnsmasq install"
  install_dnsmasq "$version"
  write_consul_config "$consul_domain" "$consul_ip" "$consul_dns_port"
  log_info "Dnsmasq install complete!"
}

install "$@"